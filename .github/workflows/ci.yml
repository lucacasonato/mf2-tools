name: ci

on:
  push:
    branches: ["main"]
    tags: ["*"] # all tags
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  MF2LSP_OFFICIAL_BUILD: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}

jobs:
  build:
    name: "ci-${{ matrix.name }}"
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - name: linux
            os: ubuntu-24.04
            target-tuple: x86_64-unknown-linux-gnu
          - name: windows
            os: windows-2022
            target-tuple: x86_64-pc-windows-msvc
          - name: macos
            os: macos-14
            target-tuple: aarch64-apple-darwin

    steps:
      - name: Configure Git
        run: git config --global core.autocrlf false

      - uses: actions/checkout@v4

      - uses: denoland/setup-deno@v2

      - uses: dsherret/rust-toolchain-file@v1

      - uses: Swatinem/rust-cache@v2

      - name: Check formatting
        if: runner.os == 'Linux'
        run: cargo fmt --all -- --check

      - name: Build
        run: cargo build --verbose --all-targets --tests --examples --release

      - name: Lint
        if: runner.os == 'Linux'
        run: cargo clippy --all-targets --all-features --release -- -D warnings
      - name: Run tests
        run: cargo test --release

      - name: Run e2e tests
        run: deno task test
        env:
          PROFILE: release

      - name: Zip up the release build (unix)
        if: runner.os != 'Windows'
        run: |
          cd target/release
          zip -r ../../mf2lsp-${{ matrix.target-tuple }}.zip mf2lsp

      - name: Zip up the release build (windows)
        if: runner.os == 'Windows'
        run: |
          cd target\release
          Compress-Archive -Path mf2lsp.exe -DestinationPath ..\..\mf2lsp-${{ matrix.target-tuple }}.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mf2lsp-${{ matrix.target-tuple }}.zip
          path: mf2lsp-*.zip

      - name: GitHub release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: mf2lsp-*.zip

  wasm:
    name: "ci-wasm"
    runs-on: ubuntu-24.04
    permissions:
      contents: write

    steps:
      - name: Configure Git
        run: git config --global core.autocrlf false

      - uses: actions/checkout@v4

      - uses: denoland/setup-deno@v2

      - uses: dsherret/rust-toolchain-file@v1

      - name: Install wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - uses: Swatinem/rust-cache@v2

      - name: Build
        run: deno task wasm:release

      - name: Run e2e tests
        run: deno task test
        env:
          PROFILE: release
          MODE: wasm

      - name: Smoke test the dprint plugin
        run: |
          echo "Hello { |World|   }!" > actual.mf2
          echo "Hello {|World|}!" > expected.mf2
          deno run -A npm:dprint fmt --plugins=./target/wasm32-unknown-unknown/release/dprint_plugin_mf2.wasm -- actual.mf2
          cmp -s actual.mf2 expected.mf2

      - name: Prepare dprint plugin for release
        run: mv ./target/wasm32-unknown-unknown/release/dprint_plugin_mf2.wasm ./dprint-plugin-mf2.wasm

      - name: Prepare dprint plugin schema
        run: deno task dprint:build {{ github.ref_name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dprint-plugin-mf2
          path: |
            dprint-plugin-mf2.wasm
            dprint-plugin-mf2.schema.json

      - name: GitHub release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: |
            dprint-plugin-mf2.wasm
            dprint-plugin-mf2.schema.json

  vscode:
    name: "ci-vscode"
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "22"

      - name: Install dependencies
        run: npm install
        working-directory: vscode

      - name: Build
        run: npm run check
        working-directory: vscode

  lint:
    name: "lint"
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - uses: denoland/setup-deno@v2

      - run: deno lint

      - run: deno fmt --check
